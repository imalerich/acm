import java.util.ArrayList;
import java.util.Scanner;

public class Bridges {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		while (proc(s)) { }
		s.close();
	}
	
	public static boolean proc(Scanner s) {
		Pair config = new Pair(s.nextLine());
		config.x = -config.x; // Invert the negative it gives us.
		if (shouldTerminate(config)) {
			return false;
		}
		
		// Load the configuration for our bridges.
		ArrayList<Pair> bridges = new ArrayList<Pair>();
		ArrayList<Pair> status = new ArrayList<Pair>();
		for (int i=0; i<config.x; i++) {
			bridges.add(new Pair(s.nextLine()));
			status.add(new Pair()); // Waiting on this bridge.
			status.add(new Pair()); // Currently on this bridge and time remaining.
		}
		
		// Initial status : everyone is waiting for bridge one.
		status.get(0).x = config.y;
		
		return true;
	}
	
	public static boolean isSimComplete(ArrayList<Pair> status) {
		for (Pair p : status) {
			//
		}
		
		return true;
	}
	
	public static boolean shouldTerminate(Pair p) {
		return p.x == 0 && p.y == 0;
	}
}

class Pair {
	int x;
	int y;
	
	Pair() {
		x = 0;
		y = 0;
	}
	
	Pair(int X, int Y) {
		x = X;
		y = Y;
	}
	
	Pair(String line) {
		Scanner s = new Scanner(line);
		x = s.nextInt();
		y = s.nextInt();
		s.close();
	}
}