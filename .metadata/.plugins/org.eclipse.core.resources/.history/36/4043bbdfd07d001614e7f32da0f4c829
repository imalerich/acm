import java.util.ArrayList;

public class Arithmetic {
	public static void main(String[] args) {
		// TODO
	}
	
	public static boolean proc(String line) {
		//
	}
	
	public static ArrayList<Op3> ops() {
		ArrayList<Op3> out = new ArrayList<Op3>();
		for (int i=0; i<OP.values().length; i++) {
			for (int j=0; j<OP.values().length; j++) {
				for (int k=0; k<OP.values().length; k++) {
					out.add(new Op3(OP.values()[i], OP.values()[j], OP.values()[k]));
				}
			}
		}
		
		return out;
	}
}

enum OP {
	PLUS, MINUS, MULT, DIV;
}

class Op3 {
	OP op1;
	OP op2;
	OP op3;
	
	Op3(OP First, OP Second, OP Third) {
		op1 = First;
		op2 = Second;
		op3 = Third;
	}
}

class Quad<T> {
	T first;
	T second;
	T third;
	T fourth;
	
	Quad(T First, T Second, T Third, T Fourth) {
		first = First;
		second = Second;
		third = Third;
		fourth = Fourth;
	}
	
	ArrayList<Quad<T>> UniquePermutations4() {
		ArrayList<Quad<T>> out = new ArrayList<Quad<T>>();
		
		// Ugly as fuck, please ignore.
		for (int i=0; i<size(); i++) {
			for (int j=0; j<size(); j++) {
				for (int k=0; k<size(); k++) {
					for (int l=0; l<size(); l++) {
						if (i != j && i != k && i != l
								&& j != k && j != l 
								&& k != l) {
							out.add(new Quad<T>(get(i), get(j), get(k), get(l)));
						}
					}
				}
			}
		}
		
		return out;
	}
		
	int size() {
		return 4;
	}
	
	T get(int index) {
		switch (index) {
		case 0:
			return first;
		case 1:
			return second;
		case 2:
			return third;
		case 3:
			return fourth;
		default:
			return null;
		}
	}
}