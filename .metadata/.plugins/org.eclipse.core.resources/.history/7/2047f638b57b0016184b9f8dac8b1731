import java.util.Scanner;

public class Compress {
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		// TODO
		s.close();
	}
	
	public static boolean proc(Scanner s, int n) {
		//
		
		return true;
	}
}

class Node {
	Node c0;
	Node c1;
	Node c2;
	Node c3;
	
	private double perc_black;
	
	Node() {
		c0 = null;
		c1 = null;
		c2 = null;
		c3 = null;
		perc_black = 0;
	}
	
	void compress(double threshold) {
		if (!hasChildren()) {
			return;
		} else {
			// First compress ourself.
			if (percentageBlack() > threshold) {
				killallChildren();
				perc_black = 1.0;
			} else if (1 - percentageBlack() > threshold) {
				killallChildren();
				perc_black = 0.0;
			} else {
				 // No compression on self, compress children instead.
				c0.compress(threshold);
				c1.compress(threshold);
				c2.compress(threshold);
				c3.compress(threshold);
			}
		}
	}
	
	void killallChildren() {
		c0 = null;
		c1 = null;
		c2 = null;
		c3 = null;
	}
	
	double percentageBlack() {
		if (!hasChildren()) {
			return perc_black;
		} else {
			return ( c0.percentageBlack() + 
					 c1.percentageBlack() +
					 c2.percentageBlack() +
					 c3.percentageBlack() ) / 4.0;
		}
	}
	
	boolean hasChildren() {
		return c0 != null;
	}
}